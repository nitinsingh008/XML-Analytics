package com.concept.crew.processor;

import java.io.File;
import $Import;
 #if($type == "XML")
import com.concept.crew.parser.XapParsingUtil;
#end
 #if($type == "DELIMITED")
import com.concept.crew.dao.loaderUtil.DelimiterDataExtractor;
#end
import org.apache.log4j.Logger;
import java.util.*;
import com.concept.crew.dao.loaderUtil.LoaderDBRoutine;

public class $ClassName 
{
	private static final 	String 					ISO_8859_2 				= "ISO-8859-2"; 
	private static final Logger log = Logger.getLogger("$ClassNameClass");
	#if($type == "XML")
	public static void execute(File fileToBeProcessed , String dbType, String jdbcUrl, String userName , String password)	throws Exception
	#end
	 #if($type == "DELIMITED")
	public static void execute(File fileToBeProcessed , String dbType, String jdbcUrl, String userName , String password,
			Boolean haveHeaderInFile,String delimiter, Class<$DelimiterclassType> className)	throws Exception
	#end				
	{
		try 
		{		
		     $StartingTag startingTag = null;
		     try 
		     {
		         if (fileToBeProcessed != null) 
		         {	
		         		
					 LoaderDBRoutine.initializeDBRoutine(dbType, jdbcUrl, userName, password);
					 #if($type == "XML")
					 log.warn("Parsing incoming XML file...");
					 
					 startingTag = XapParsingUtil.parseXml(fileToBeProcessed.getCanonicalPath(), ISO_8859_2);		            		            
		            	
		             // Save all Incoming Data into Tables
		             log.warn("Processing incoming XML file...");
					 LoadSaveProcessor.saveData(startingTag.get$List());
					 #elseif($type == "DELIMITED")
					 log.warn("Parsing incoming Delimited file...");
					 
					 List<$StartingTag> records = DelimiterDataExtractor.parseFileData(haveHeaderInFile,delimiter, className,fileToBeProcessed.getCanonicalPath());		            		            
		            	
		             // Save all Incoming Data into Tables
		             log.warn("Processing incoming Delimited file...");
					 LoadSaveProcessor.saveData(records);
					 #end
					 						 					 
				 }
				 startingTag = null;
			 } 
		     catch (Exception e){
		     	log.error("Failed while parsing XML");
		     	throw new RuntimeException(e.getMessage());
			 }			  
		}
		catch(Exception e) 
		{
			log.error("Failed while processing XML");
			throw new RuntimeException("Error processing the file " + e.getMessage());	
		}					

	}
}