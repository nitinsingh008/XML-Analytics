package com.concept.crew.processor;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import com.concept.crew.common.DataWriter;
import $Import;
import com.concept.crew.info.raw.ParentInfoWrapper;
import com.concept.crew.dao.loaderUtil.QueryReaderUtil;
import org.apache.log4j.Logger;

public class LoadSaveProcessor 
{
	private static final Logger log = Logger.getLogger(LoadSaveProcessor.class);
	
	/**
	 * Iterate over ROOT bonds, transform them and persist all Bonds in RAW
	 * tables
	 */
	public static void saveData(List<$Root> records) throws Exception {

		Collection<ParentInfoWrapper> wrapperList = new ArrayList<ParentInfoWrapper>();
		
		List<Integer> uniqueKeys = fetchPrimarykey(records.size()); 
		
		for ($Root record : records) {
			ParentInfoWrapper wrapper = new ParentInfoWrapper();
			wrapper.set$Root(record);
			// Generate unique Key using sequence and assign to Bond
			wrapper.setPkeyId(uniqueKeys.remove(0).longValue());

			wrapperList.add(wrapper);
		}
		DataWriter writer = new DataWriter();
		writer.write(wrapperList);
	}

	private static List<Integer> fetchPrimarykey(int size) {	
		log.warn("fetching new primary keys from db");
		List<Integer> uniqueKeys = new ArrayList<Integer>();
		try {
				uniqueKeys.addAll(QueryReaderUtil.loadNewPKeys(size));
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new RuntimeException(	e.getMessage() ,  e);
		}
		return uniqueKeys;
	}
	
}
